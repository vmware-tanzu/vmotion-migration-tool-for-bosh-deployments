// Code generated by counterfeiter. DO NOT EDIT.
package migratefakes

import (
	"context"
	"sync"

	"github.com/vmware-tanzu/vmotion-migration-tool-for-bosh-deployments/pkg/bosh"
	"github.com/vmware-tanzu/vmotion-migration-tool-for-bosh-deployments/pkg/migrate"
)

type FakeBoshClient struct {
	VMsAndStemcellsStub        func(context.Context) ([]bosh.VM, error)
	vMsAndStemcellsMutex       sync.RWMutex
	vMsAndStemcellsArgsForCall []struct {
		arg1 context.Context
	}
	vMsAndStemcellsReturns struct {
		result1 []bosh.VM
		result2 error
	}
	vMsAndStemcellsReturnsOnCall map[int]struct {
		result1 []bosh.VM
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBoshClient) VMsAndStemcells(arg1 context.Context) ([]bosh.VM, error) {
	fake.vMsAndStemcellsMutex.Lock()
	ret, specificReturn := fake.vMsAndStemcellsReturnsOnCall[len(fake.vMsAndStemcellsArgsForCall)]
	fake.vMsAndStemcellsArgsForCall = append(fake.vMsAndStemcellsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.VMsAndStemcellsStub
	fakeReturns := fake.vMsAndStemcellsReturns
	fake.recordInvocation("VMsAndStemcells", []interface{}{arg1})
	fake.vMsAndStemcellsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBoshClient) VMsAndStemcellsCallCount() int {
	fake.vMsAndStemcellsMutex.RLock()
	defer fake.vMsAndStemcellsMutex.RUnlock()
	return len(fake.vMsAndStemcellsArgsForCall)
}

func (fake *FakeBoshClient) VMsAndStemcellsCalls(stub func(context.Context) ([]bosh.VM, error)) {
	fake.vMsAndStemcellsMutex.Lock()
	defer fake.vMsAndStemcellsMutex.Unlock()
	fake.VMsAndStemcellsStub = stub
}

func (fake *FakeBoshClient) VMsAndStemcellsArgsForCall(i int) context.Context {
	fake.vMsAndStemcellsMutex.RLock()
	defer fake.vMsAndStemcellsMutex.RUnlock()
	argsForCall := fake.vMsAndStemcellsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBoshClient) VMsAndStemcellsReturns(result1 []bosh.VM, result2 error) {
	fake.vMsAndStemcellsMutex.Lock()
	defer fake.vMsAndStemcellsMutex.Unlock()
	fake.VMsAndStemcellsStub = nil
	fake.vMsAndStemcellsReturns = struct {
		result1 []bosh.VM
		result2 error
	}{result1, result2}
}

func (fake *FakeBoshClient) VMsAndStemcellsReturnsOnCall(i int, result1 []bosh.VM, result2 error) {
	fake.vMsAndStemcellsMutex.Lock()
	defer fake.vMsAndStemcellsMutex.Unlock()
	fake.VMsAndStemcellsStub = nil
	if fake.vMsAndStemcellsReturnsOnCall == nil {
		fake.vMsAndStemcellsReturnsOnCall = make(map[int]struct {
			result1 []bosh.VM
			result2 error
		})
	}
	fake.vMsAndStemcellsReturnsOnCall[i] = struct {
		result1 []bosh.VM
		result2 error
	}{result1, result2}
}

func (fake *FakeBoshClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.vMsAndStemcellsMutex.RLock()
	defer fake.vMsAndStemcellsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBoshClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ migrate.BoshClient = new(FakeBoshClient)
