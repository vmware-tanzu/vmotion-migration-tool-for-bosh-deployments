// Code generated by counterfeiter. DO NOT EDIT.
package evcfakes

import (
	"context"
	"sync"

	"github.com/vmware-tanzu/vmotion-migration-tool-for-bosh-deployments/pkg/evc"
)

type FakeVCenterClient struct {
	SetEVCModeStub        func(context.Context, string, string) error
	setEVCModeMutex       sync.RWMutex
	setEVCModeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	setEVCModeReturns struct {
		result1 error
	}
	setEVCModeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVCenterClient) SetEVCMode(arg1 context.Context, arg2 string, arg3 string) error {
	fake.setEVCModeMutex.Lock()
	ret, specificReturn := fake.setEVCModeReturnsOnCall[len(fake.setEVCModeArgsForCall)]
	fake.setEVCModeArgsForCall = append(fake.setEVCModeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.SetEVCModeStub
	fakeReturns := fake.setEVCModeReturns
	fake.recordInvocation("SetEVCMode", []interface{}{arg1, arg2, arg3})
	fake.setEVCModeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVCenterClient) SetEVCModeCallCount() int {
	fake.setEVCModeMutex.RLock()
	defer fake.setEVCModeMutex.RUnlock()
	return len(fake.setEVCModeArgsForCall)
}

func (fake *FakeVCenterClient) SetEVCModeCalls(stub func(context.Context, string, string) error) {
	fake.setEVCModeMutex.Lock()
	defer fake.setEVCModeMutex.Unlock()
	fake.SetEVCModeStub = stub
}

func (fake *FakeVCenterClient) SetEVCModeArgsForCall(i int) (context.Context, string, string) {
	fake.setEVCModeMutex.RLock()
	defer fake.setEVCModeMutex.RUnlock()
	argsForCall := fake.setEVCModeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeVCenterClient) SetEVCModeReturns(result1 error) {
	fake.setEVCModeMutex.Lock()
	defer fake.setEVCModeMutex.Unlock()
	fake.SetEVCModeStub = nil
	fake.setEVCModeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVCenterClient) SetEVCModeReturnsOnCall(i int, result1 error) {
	fake.setEVCModeMutex.Lock()
	defer fake.setEVCModeMutex.Unlock()
	fake.SetEVCModeStub = nil
	if fake.setEVCModeReturnsOnCall == nil {
		fake.setEVCModeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setEVCModeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVCenterClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setEVCModeMutex.RLock()
	defer fake.setEVCModeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVCenterClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ evc.VCenterClient = new(FakeVCenterClient)
