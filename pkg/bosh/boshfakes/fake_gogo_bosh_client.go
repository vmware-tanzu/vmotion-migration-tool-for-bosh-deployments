// Code generated by counterfeiter. DO NOT EDIT.
package boshfakes

import (
	"sync"

	"github.com/cloudfoundry-community/gogobosh"
	"github.com/vmware-tanzu/vmotion-migration-tool-for-bosh-deployments/pkg/bosh"
)

type FakeGogoBoshClient struct {
	GetCloudConfigStub        func(bool) ([]gogobosh.Cfg, error)
	getCloudConfigMutex       sync.RWMutex
	getCloudConfigArgsForCall []struct {
		arg1 bool
	}
	getCloudConfigReturns struct {
		result1 []gogobosh.Cfg
		result2 error
	}
	getCloudConfigReturnsOnCall map[int]struct {
		result1 []gogobosh.Cfg
		result2 error
	}
	GetDeploymentVMsStub        func(string) ([]gogobosh.VM, error)
	getDeploymentVMsMutex       sync.RWMutex
	getDeploymentVMsArgsForCall []struct {
		arg1 string
	}
	getDeploymentVMsReturns struct {
		result1 []gogobosh.VM
		result2 error
	}
	getDeploymentVMsReturnsOnCall map[int]struct {
		result1 []gogobosh.VM
		result2 error
	}
	GetDeploymentsStub        func() ([]gogobosh.Deployment, error)
	getDeploymentsMutex       sync.RWMutex
	getDeploymentsArgsForCall []struct {
	}
	getDeploymentsReturns struct {
		result1 []gogobosh.Deployment
		result2 error
	}
	getDeploymentsReturnsOnCall map[int]struct {
		result1 []gogobosh.Deployment
		result2 error
	}
	GetStemcellsStub        func() ([]gogobosh.Stemcell, error)
	getStemcellsMutex       sync.RWMutex
	getStemcellsArgsForCall []struct {
	}
	getStemcellsReturns struct {
		result1 []gogobosh.Stemcell
		result2 error
	}
	getStemcellsReturnsOnCall map[int]struct {
		result1 []gogobosh.Stemcell
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGogoBoshClient) GetCloudConfig(arg1 bool) ([]gogobosh.Cfg, error) {
	fake.getCloudConfigMutex.Lock()
	ret, specificReturn := fake.getCloudConfigReturnsOnCall[len(fake.getCloudConfigArgsForCall)]
	fake.getCloudConfigArgsForCall = append(fake.getCloudConfigArgsForCall, struct {
		arg1 bool
	}{arg1})
	stub := fake.GetCloudConfigStub
	fakeReturns := fake.getCloudConfigReturns
	fake.recordInvocation("GetCloudConfig", []interface{}{arg1})
	fake.getCloudConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGogoBoshClient) GetCloudConfigCallCount() int {
	fake.getCloudConfigMutex.RLock()
	defer fake.getCloudConfigMutex.RUnlock()
	return len(fake.getCloudConfigArgsForCall)
}

func (fake *FakeGogoBoshClient) GetCloudConfigCalls(stub func(bool) ([]gogobosh.Cfg, error)) {
	fake.getCloudConfigMutex.Lock()
	defer fake.getCloudConfigMutex.Unlock()
	fake.GetCloudConfigStub = stub
}

func (fake *FakeGogoBoshClient) GetCloudConfigArgsForCall(i int) bool {
	fake.getCloudConfigMutex.RLock()
	defer fake.getCloudConfigMutex.RUnlock()
	argsForCall := fake.getCloudConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGogoBoshClient) GetCloudConfigReturns(result1 []gogobosh.Cfg, result2 error) {
	fake.getCloudConfigMutex.Lock()
	defer fake.getCloudConfigMutex.Unlock()
	fake.GetCloudConfigStub = nil
	fake.getCloudConfigReturns = struct {
		result1 []gogobosh.Cfg
		result2 error
	}{result1, result2}
}

func (fake *FakeGogoBoshClient) GetCloudConfigReturnsOnCall(i int, result1 []gogobosh.Cfg, result2 error) {
	fake.getCloudConfigMutex.Lock()
	defer fake.getCloudConfigMutex.Unlock()
	fake.GetCloudConfigStub = nil
	if fake.getCloudConfigReturnsOnCall == nil {
		fake.getCloudConfigReturnsOnCall = make(map[int]struct {
			result1 []gogobosh.Cfg
			result2 error
		})
	}
	fake.getCloudConfigReturnsOnCall[i] = struct {
		result1 []gogobosh.Cfg
		result2 error
	}{result1, result2}
}

func (fake *FakeGogoBoshClient) GetDeploymentVMs(arg1 string) ([]gogobosh.VM, error) {
	fake.getDeploymentVMsMutex.Lock()
	ret, specificReturn := fake.getDeploymentVMsReturnsOnCall[len(fake.getDeploymentVMsArgsForCall)]
	fake.getDeploymentVMsArgsForCall = append(fake.getDeploymentVMsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetDeploymentVMsStub
	fakeReturns := fake.getDeploymentVMsReturns
	fake.recordInvocation("GetDeploymentVMs", []interface{}{arg1})
	fake.getDeploymentVMsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGogoBoshClient) GetDeploymentVMsCallCount() int {
	fake.getDeploymentVMsMutex.RLock()
	defer fake.getDeploymentVMsMutex.RUnlock()
	return len(fake.getDeploymentVMsArgsForCall)
}

func (fake *FakeGogoBoshClient) GetDeploymentVMsCalls(stub func(string) ([]gogobosh.VM, error)) {
	fake.getDeploymentVMsMutex.Lock()
	defer fake.getDeploymentVMsMutex.Unlock()
	fake.GetDeploymentVMsStub = stub
}

func (fake *FakeGogoBoshClient) GetDeploymentVMsArgsForCall(i int) string {
	fake.getDeploymentVMsMutex.RLock()
	defer fake.getDeploymentVMsMutex.RUnlock()
	argsForCall := fake.getDeploymentVMsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGogoBoshClient) GetDeploymentVMsReturns(result1 []gogobosh.VM, result2 error) {
	fake.getDeploymentVMsMutex.Lock()
	defer fake.getDeploymentVMsMutex.Unlock()
	fake.GetDeploymentVMsStub = nil
	fake.getDeploymentVMsReturns = struct {
		result1 []gogobosh.VM
		result2 error
	}{result1, result2}
}

func (fake *FakeGogoBoshClient) GetDeploymentVMsReturnsOnCall(i int, result1 []gogobosh.VM, result2 error) {
	fake.getDeploymentVMsMutex.Lock()
	defer fake.getDeploymentVMsMutex.Unlock()
	fake.GetDeploymentVMsStub = nil
	if fake.getDeploymentVMsReturnsOnCall == nil {
		fake.getDeploymentVMsReturnsOnCall = make(map[int]struct {
			result1 []gogobosh.VM
			result2 error
		})
	}
	fake.getDeploymentVMsReturnsOnCall[i] = struct {
		result1 []gogobosh.VM
		result2 error
	}{result1, result2}
}

func (fake *FakeGogoBoshClient) GetDeployments() ([]gogobosh.Deployment, error) {
	fake.getDeploymentsMutex.Lock()
	ret, specificReturn := fake.getDeploymentsReturnsOnCall[len(fake.getDeploymentsArgsForCall)]
	fake.getDeploymentsArgsForCall = append(fake.getDeploymentsArgsForCall, struct {
	}{})
	stub := fake.GetDeploymentsStub
	fakeReturns := fake.getDeploymentsReturns
	fake.recordInvocation("GetDeployments", []interface{}{})
	fake.getDeploymentsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGogoBoshClient) GetDeploymentsCallCount() int {
	fake.getDeploymentsMutex.RLock()
	defer fake.getDeploymentsMutex.RUnlock()
	return len(fake.getDeploymentsArgsForCall)
}

func (fake *FakeGogoBoshClient) GetDeploymentsCalls(stub func() ([]gogobosh.Deployment, error)) {
	fake.getDeploymentsMutex.Lock()
	defer fake.getDeploymentsMutex.Unlock()
	fake.GetDeploymentsStub = stub
}

func (fake *FakeGogoBoshClient) GetDeploymentsReturns(result1 []gogobosh.Deployment, result2 error) {
	fake.getDeploymentsMutex.Lock()
	defer fake.getDeploymentsMutex.Unlock()
	fake.GetDeploymentsStub = nil
	fake.getDeploymentsReturns = struct {
		result1 []gogobosh.Deployment
		result2 error
	}{result1, result2}
}

func (fake *FakeGogoBoshClient) GetDeploymentsReturnsOnCall(i int, result1 []gogobosh.Deployment, result2 error) {
	fake.getDeploymentsMutex.Lock()
	defer fake.getDeploymentsMutex.Unlock()
	fake.GetDeploymentsStub = nil
	if fake.getDeploymentsReturnsOnCall == nil {
		fake.getDeploymentsReturnsOnCall = make(map[int]struct {
			result1 []gogobosh.Deployment
			result2 error
		})
	}
	fake.getDeploymentsReturnsOnCall[i] = struct {
		result1 []gogobosh.Deployment
		result2 error
	}{result1, result2}
}

func (fake *FakeGogoBoshClient) GetStemcells() ([]gogobosh.Stemcell, error) {
	fake.getStemcellsMutex.Lock()
	ret, specificReturn := fake.getStemcellsReturnsOnCall[len(fake.getStemcellsArgsForCall)]
	fake.getStemcellsArgsForCall = append(fake.getStemcellsArgsForCall, struct {
	}{})
	stub := fake.GetStemcellsStub
	fakeReturns := fake.getStemcellsReturns
	fake.recordInvocation("GetStemcells", []interface{}{})
	fake.getStemcellsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGogoBoshClient) GetStemcellsCallCount() int {
	fake.getStemcellsMutex.RLock()
	defer fake.getStemcellsMutex.RUnlock()
	return len(fake.getStemcellsArgsForCall)
}

func (fake *FakeGogoBoshClient) GetStemcellsCalls(stub func() ([]gogobosh.Stemcell, error)) {
	fake.getStemcellsMutex.Lock()
	defer fake.getStemcellsMutex.Unlock()
	fake.GetStemcellsStub = stub
}

func (fake *FakeGogoBoshClient) GetStemcellsReturns(result1 []gogobosh.Stemcell, result2 error) {
	fake.getStemcellsMutex.Lock()
	defer fake.getStemcellsMutex.Unlock()
	fake.GetStemcellsStub = nil
	fake.getStemcellsReturns = struct {
		result1 []gogobosh.Stemcell
		result2 error
	}{result1, result2}
}

func (fake *FakeGogoBoshClient) GetStemcellsReturnsOnCall(i int, result1 []gogobosh.Stemcell, result2 error) {
	fake.getStemcellsMutex.Lock()
	defer fake.getStemcellsMutex.Unlock()
	fake.GetStemcellsStub = nil
	if fake.getStemcellsReturnsOnCall == nil {
		fake.getStemcellsReturnsOnCall = make(map[int]struct {
			result1 []gogobosh.Stemcell
			result2 error
		})
	}
	fake.getStemcellsReturnsOnCall[i] = struct {
		result1 []gogobosh.Stemcell
		result2 error
	}{result1, result2}
}

func (fake *FakeGogoBoshClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCloudConfigMutex.RLock()
	defer fake.getCloudConfigMutex.RUnlock()
	fake.getDeploymentVMsMutex.RLock()
	defer fake.getDeploymentVMsMutex.RUnlock()
	fake.getDeploymentsMutex.RLock()
	defer fake.getDeploymentsMutex.RUnlock()
	fake.getStemcellsMutex.RLock()
	defer fake.getStemcellsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGogoBoshClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ bosh.GogoBoshClient = new(FakeGogoBoshClient)
